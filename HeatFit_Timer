library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- Use numeric_std for unsigned and signed arithmetic

entity HeatFit_Timer is
    Port (
        clk         : in  STD_LOGIC;
        reset       : in  STD_LOGIC; -- Reset to save in memory
        heart_rate  : in  STD_LOGIC; -- 1 for active, 0 for idle
        duration    : out STD_LOGIC_VECTOR(15 downto 0); -- Current duration
        memory      : out STD_LOGIC_VECTOR(15 downto 0); -- Saved duration
        highest_time: out STD_LOGIC_VECTOR(15 downto 0); -- Highest time recorded
        latest_time : out STD_LOGIC_VECTOR(15 downto 0); -- Most recent time recorded
        avg_time    : out STD_LOGIC_VECTOR(15 downto 0)  -- Average time across all sessions
    );
end HeatFit_Timer;

architecture Behavioral of HeatFit_Timer is
    -- Internal signals and registers
    signal state             : STD_LOGIC := '0'; -- 0: Idle, 1: Counting
    signal counter           : unsigned(15 downto 0) := (others => '0');
    signal memory_reg        : unsigned(15 downto 0) := (others => '0');
    signal highest_time_reg  : unsigned(15 downto 0) := (others => '0');
    signal latest_time_reg   : unsigned(15 downto 0) := (others => '0');
    
    -- Signals for average time calculation
    signal total_time_reg    : unsigned(31 downto 0) := (others => '0');
    signal session_count_reg : unsigned(15 downto 0) := (others => '0');
    signal avg_time_reg      : unsigned(15 downto 0) := (others => '0');

    signal reset_prev        : STD_LOGIC := '0';
    signal reset_edge        : STD_LOGIC := '0';  -- Detects rising edge of reset
    signal reset_processing  : STD_LOGIC := '0';
    signal first_session_done : STD_LOGIC := '0';  -- Flag for the first session

begin

    -- Rising edge detection for the reset signal
    process(clk)
    begin
        if rising_edge(clk) then
            reset_edge <= reset and not reset_prev;
            reset_prev <= reset;
        end if;
    end process;

    -- Main logic for HeatFit Timer
    process(clk)
    begin
        if rising_edge(clk) then
            -- Call the initialization function if reset is asserted
            if reset = '1' then
                handle_reset;
            else
                -- When reset is deasserted, update the latest time
                if reset_processing = '1' then
                    latest_time_reg <= counter;
                    reset_processing <= '0';
                end if;
            end if;

            -- Counting logic (if heart rate is 1, start counting)
            if heart_rate = '1' then
                if state = '0' then
                    state <= '1'; -- Start counting when heart rate is 1
                end if;
            else
                if state = '1' then
                    state <= '0'; -- Stop counting when heart rate is 0
                end if;
            end if;

            -- Update counter while counting
            if state = '1' then
                counter <= counter + 1;
            end if;
        end if;
    end process;

    -- Function for handling reset behavior
    procedure handle_reset is
    begin
        -- Save the current session data when reset is asserted
        if reset_processing = '0' then
            save_session_data;
            -- Reset the counter immediately when reset is asserted
            counter <= (others => '0');
            -- Mark that reset is being processed
            reset_processing <= '1';
        end if;
    end procedure;

    -- Function to save session data (memory, highest time, average time)
    procedure save_session_data is
    begin
        -- Save current session duration in memory
        memory_reg <= counter;

        -- Update the highest time if necessary
        if counter > highest_time_reg then
            highest_time_reg <= counter;
        end if;

        -- Calculate the average time after the first session
        if first_session_done = '0' then
            -- If it's the first session, set the avg_time to the first session's duration
            avg_time_reg <= std_logic_vector(counter);
            first_session_done <= '1';  -- Mark that the first session is done
        else
            -- After the first session, calculate the average based on previous and current sessions
            calculate_average;
        end if;
    end procedure;

    -- Function to calculate the average time across all sessions
    procedure calculate_average is
    begin
        -- Accumulate total time and session count
        total_time_reg <= total_time_reg + to_unsigned(to_integer(counter), 32);
        session_count_reg <= session_count_reg + 1;

        -- Calculate the average time (total time divided by number of sessions)
        if session_count_reg > 0 then
            avg_time_reg <= std_logic_vector(to_unsigned(to_integer(total_time_reg) / to_integer(session_count_reg), 16));
        end if;
    end procedure;

    -- Output the values to external signals
    duration <= std_logic_vector(counter);
    memory <= std_logic_vector(memory_reg);
    highest_time <= std_logic_vector(highest_time_reg);
    latest_time <= std_logic_vector(latest_time_reg);
    avg_time <= std_logic_vector(avg_time_reg);

end Behavioral;
 
