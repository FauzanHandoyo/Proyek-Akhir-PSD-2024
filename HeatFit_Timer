-- Main logic for HeatFit Timer
process(clk)
begin
    if rising_edge(clk) then
        -- When reset is asserted, perform actions to store data and reset the timer
        if reset = '1' then
            -- Save current session data only when reset is not processing
            if reset_processing = '0' then
                memory_reg <= counter;

                -- Update the highest time if necessary
                if counter > highest_time_reg then
                    highest_time_reg <= counter;
                end if;

                -- If it's the first session, just set the avg time as the first session's duration
                if first_session_done = '0' then
                    avg_time_reg <= std_logic_vector(counter);  -- Set the average to the first session's time
                    first_session_done <= '1';  -- Mark that the first session is done
                else
                    -- After the first session, calculate the average based on the previous average and current session
                    total_time_reg <= total_time_reg + to_unsigned(to_integer(counter), 32);
                    session_count_reg <= session_count_reg + 1;

                    -- Calculate the average time
                    avg_time_reg <= std_logic_vector(to_unsigned(to_integer(total_time_reg) / to_integer(session_count_reg), 16));
                end if;
            end if;

            -- Reset the counter immediately when reset is asserted
            counter <= (others => '0');

            -- Mark that reset is being processed
            reset_processing <= '1';
        else
            -- When reset is deasserted, allow the `latest_time` to update
            if reset_processing = '1' then
                latest_time_reg <= counter;
                reset_processing <= '0'; -- Reset processing done
            end if;
        end if;

        -- Counting logic (if heart rate is 1, start counting)
        if heart_rate = '1' then
            if state = '0' then
                state <= '1'; -- Start counting when heart rate is 1
            end if;
        else
            if state = '1' then
                state <= '0'; -- Stop counting when heart rate is 0
            end if;
        end if;

        -- Update counter while counting
        if state = '1' then
            counter <= counter + 1;
        end if;
    end if;
end process;

