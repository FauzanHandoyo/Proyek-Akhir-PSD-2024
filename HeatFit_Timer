library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity HeatFit_Timer is
    Port (
        clk         : in  STD_LOGIC;
        reset       : in  STD_LOGIC;
        heart_rate  : in  STD_LOGIC;
        duration    : out STD_LOGIC_VECTOR(15 downto 0);
        memory      : out STD_LOGIC_VECTOR(15 downto 0);
        highest_time: out STD_LOGIC_VECTOR(15 downto 0);
        latest_time : out STD_LOGIC_VECTOR(15 downto 0);
        avg_time    : out STD_LOGIC_VECTOR(15 downto 0);
        active_state: out STD_LOGIC;
        stop_state  : out STD_LOGIC;
        reset_state : out STD_LOGIC;
        hours       : out STD_LOGIC_VECTOR(7 downto 0);
        minutes     : out STD_LOGIC_VECTOR(7 downto 0);
        seconds     : out STD_LOGIC_VECTOR(7 downto 0)
    );
end HeatFit_Timer;

architecture Structural of HeatFit_Timer is
    -- Internal signals
    signal internal_duration    : STD_LOGIC_VECTOR(15 downto 0);
    signal internal_save         : STD_LOGIC := '0';
    signal internal_enable       : STD_LOGIC := '0';
    signal internal_reset_state  : STD_LOGIC := '0';

    -- Components declaration
    component Timer_Logic is
        Port (
            clk     : in  STD_LOGIC;
            reset   : in  STD_LOGIC;
            enable  : in  STD_LOGIC;
            duration: out STD_LOGIC_VECTOR(15 downto 0);
            hours   : out STD_LOGIC_VECTOR(7 downto 0);
            minutes : out STD_LOGIC_VECTOR(7 downto 0);
            seconds : out STD_LOGIC_VECTOR(7 downto 0)
        );
    end component;

    component Session_Manager is
        Port (
            clk          : in  STD_LOGIC;
            reset        : in  STD_LOGIC;
            save         : in  STD_LOGIC;
            duration     : in  STD_LOGIC_VECTOR(15 downto 0);
            memory       : out STD_LOGIC_VECTOR(15 downto 0);
            highest_time : out STD_LOGIC_VECTOR(15 downto 0);
            latest_time  : out STD_LOGIC_VECTOR(15 downto 0);
            avg_time     : out STD_LOGIC_VECTOR(15 downto 0)
        );
    end component;

begin
    -- Timer Logic Instance
    Timer_Instance: Timer_Logic
        Port map (
            clk      => clk,
            reset    => reset,
            enable   => internal_enable,
            duration => internal_duration,
            hours    => hours,
            minutes  => minutes,
            seconds  => seconds
        );

    -- Session Manager Instance
    Session_Instance: Session_Manager
        Port map (
            clk          => clk,
            reset        => reset,
            save         => internal_save,
            duration     => internal_duration,
            memory       => memory,
            highest_time => highest_time,
            latest_time  => latest_time,
            avg_time     => avg_time
        );

    -- Control logic for enable and save signals
    process(clk)
    begin
        if rising_edge(clk) then
            if reset = '1' then
                internal_enable <= '0';
                internal_save <= '0';
            elsif heart_rate = '1' then
                internal_enable <= '1';  -- Enable Timer Logic
                internal_save <= '0';    -- Do not save yet
            elsif heart_rate = '0' and internal_enable = '1' then
                internal_enable <= '0';  -- Disable Timer Logic
                internal_save <= '1';    -- Trigger save in Session Manager
            else
                internal_save <= '0';    -- De-assert save after 1 cycle
            end if;
        end if;
    end process;

    -- State indicators
    active_state <= internal_enable;
    stop_state   <= not internal_enable and not reset;
    reset_state  <= reset;

    -- Output duration
    duration <= internal_duration;
end Structural;
