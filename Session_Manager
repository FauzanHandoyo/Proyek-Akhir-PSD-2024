library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity Session_Manager is
    Port (
        clk          : in  STD_LOGIC;
        reset        : in  STD_LOGIC;
        save         : in  STD_LOGIC;
        duration     : in  STD_LOGIC_VECTOR(15 downto 0);
        memory       : out STD_LOGIC_VECTOR(15 downto 0);
        highest_time : out STD_LOGIC_VECTOR(15 downto 0);
        latest_time  : out STD_LOGIC_VECTOR(15 downto 0);
        avg_time     : out STD_LOGIC_VECTOR(15 downto 0)
    );
end Session_Manager;

architecture Behavioral of Session_Manager is
    signal memory_reg        : unsigned(15 downto 0) := (others => '0');
    signal highest_time_reg  : unsigned(15 downto 0) := (others => '0');
    signal latest_time_reg   : unsigned(15 downto 0) := (others => '0');
    signal total_time_reg    : unsigned(31 downto 0) := (others => '0');
    signal session_count_reg : unsigned(15 downto 0) := (others => '0');
    signal avg_time_reg      : unsigned(15 downto 0) := (others => '0');
begin
    -- Logic for session management
    process(clk)
    begin
        if rising_edge(clk) then
            if reset = '1' then
                memory_reg        <= (others => '0');
                highest_time_reg  <= (others => '0');
                latest_time_reg   <= (others => '0');
                total_time_reg    <= (others => '0');
                session_count_reg <= (others => '0');
                avg_time_reg      <= (others => '0');
            elsif save = '1' then
                memory_reg <= unsigned(duration);
                latest_time_reg <= unsigned(duration);

                -- Update highest time
                if unsigned(duration) > highest_time_reg then
                    highest_time_reg <= unsigned(duration);
                end if;

                -- Update total time and session count
                total_time_reg <= total_time_reg + unsigned(duration);
                session_count_reg <= session_count_reg + 1;

                -- Calculate average time
                if session_count_reg > 0 then
                    avg_time_reg <= resize(total_time_reg / session_count_reg, 16);
                end if;
            end if;
        end if;
    end process;

    -- Assign outputs
    memory       <= std_logic_vector(memory_reg);
    highest_time <= std_logic_vector(highest_time_reg);
    latest_time  <= std_logic_vector(latest_time_reg);
    avg_time     <= std_logic_vector(avg_time_reg);
end Behavioral;
