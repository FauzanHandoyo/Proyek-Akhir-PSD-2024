library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- Use numeric_std for unsigned and signed arithmetic

entity HeatFit_Timer_tb is
end HeatFit_Timer_tb;

architecture Behavioral of HeatFit_Timer_tb is
    -- Component declaration for the unit under test (UUT)
    component HeatFit_Timer
        Port (
            clk         : in  STD_LOGIC;
            reset       : in  STD_LOGIC; -- Reset to save in memory
            heart_rate  : in  STD_LOGIC; -- 1 for active, 0 for idle
            duration    : out STD_LOGIC_VECTOR(15 downto 0); -- Current duration
            memory      : out STD_LOGIC_VECTOR(15 downto 0); -- Saved duration
            highest_time: out STD_LOGIC_VECTOR(15 downto 0); -- Highest time recorded
            latest_time : out STD_LOGIC_VECTOR(15 downto 0); -- Most recent time recorded
            avg_time    : out STD_LOGIC_VECTOR(15 downto 0); -- Average time across all sessions
            
            -- New Indicators
            active_state : out STD_LOGIC;  -- Active state indicator
            stop_state   : out STD_LOGIC;  -- Stop state indicator
            reset_state  : out STD_LOGIC;  -- Reset state indicator
            
            -- Hours, Minutes, and Seconds output
            hours        : out STD_LOGIC_VECTOR(7 downto 0);  -- Hours as 8-bit vector
            minutes      : out STD_LOGIC_VECTOR(7 downto 0);  -- Minutes as 8-bit vector
            seconds      : out STD_LOGIC_VECTOR(7 downto 0)   -- Seconds as 8-bit vector
        );
    end component;

    -- Signals to connect to UUT
    signal clk         : STD_LOGIC := '0';
    signal reset       : STD_LOGIC := '0';
    signal heart_rate  : STD_LOGIC := '0';
    signal duration    : STD_LOGIC_VECTOR(15 downto 0);
    signal memory      : STD_LOGIC_VECTOR(15 downto 0);
    signal highest_time: STD_LOGIC_VECTOR(15 downto 0);
    signal latest_time : STD_LOGIC_VECTOR(15 downto 0);
    signal avg_time    : STD_LOGIC_VECTOR(15 downto 0);
    signal active_state: STD_LOGIC;
    signal stop_state  : STD_LOGIC;
    signal reset_state : STD_LOGIC;
    signal hours       : STD_LOGIC_VECTOR(7 downto 0);
    signal minutes     : STD_LOGIC_VECTOR(7 downto 0);
    signal seconds     : STD_LOGIC_VECTOR(7 downto 0);

    -- Clock period definition
    constant CLK_PERIOD : time := 10 ns;

begin
    -- Instantiate the UUT
    uut: HeatFit_Timer
        Port map (
            clk         => clk,
            reset       => reset,
            heart_rate  => heart_rate,
            duration    => duration,
            memory      => memory,
            highest_time=> highest_time,
            latest_time => latest_time,
            avg_time    => avg_time,
            active_state=> active_state,
            stop_state  => stop_state,
            reset_state => reset_state,
            hours       => hours,
            minutes     => minutes,
            seconds     => seconds
        );

    -- Clock generation process
    clk_process : process
    begin
        while True loop
            clk <= '0';
            wait for CLK_PERIOD / 2;
            clk <= '1';
            wait for CLK_PERIOD / 2;
        end loop;
    end process;

    -- Test stimulus process
    stimulus_process : process
    begin
        -- Initial state
        reset <= '0';
        heart_rate <= '0';
        wait for 20 ns;

        -- First session
        heart_rate <= '1';  -- Start counting
        wait for 100 ns;     -- Active for 100 ns
        reset <= '1';        -- Save session
        wait for 20 ns;
        reset <= '0';        -- Reset done
        wait for 10 ns;

        -- Second session
        heart_rate <= '1';  -- Start counting
        wait for 150 ns;     -- Active for 150 ns
        reset <= '1';        -- Save session
        wait for 20 ns;
        reset <= '0';        -- Reset done
        wait for 10 ns;

        -- Third session
        heart_rate <= '1';  -- Start counting
        wait for 75 ns;      -- Active for 75 ns
        reset <= '1';        -- Save session
        wait for 20 ns;
        reset <= '0';        -- Reset done
        wait for 10 ns;

        -- Fourth session
        heart_rate <= '1';  -- Start counting
        wait for 50 ns;      -- Active for 50 ns
        reset <= '1';        -- Save session
        wait for 20 ns;
        reset <= '0';        -- Reset done
        wait for 10 ns;

        -- Fifth session (longer time to test hours/minutes/seconds)
        heart_rate <= '1';  -- Start counting
        wait for 3600 ns;    -- Active for 1 hour
        reset <= '1';        -- Save session
        wait for 20 ns;
        reset <= '0';        -- Reset done
        wait for 10 ns;

        -- Test idle state (heart_rate = '0')
        heart_rate <= '0';  -- Stop counting
        wait for 100 ns;     -- Idle for 100 ns

        -- End simulation
        wait;
    end process;

end Behavioral;
