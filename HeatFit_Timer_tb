library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- Use numeric_std for unsigned and signed arithmetic

entity HeatFit_Timer_TB is
end HeatFit_Timer_TB;

architecture Behavioral of HeatFit_Timer_TB is
    component HeatFit_Timer
        Port (
            clk         : in  STD_LOGIC;
            reset       : in  STD_LOGIC;
            heart_rate  : in  STD_LOGIC;
            duration    : out STD_LOGIC_VECTOR(15 downto 0);
            memory      : out STD_LOGIC_VECTOR(15 downto 0);
            highest_time: out STD_LOGIC_VECTOR(15 downto 0);
            latest_time : out STD_LOGIC_VECTOR(15 downto 0);
            avg_time    : out STD_LOGIC_VECTOR(15 downto 0);
            active_state: out STD_LOGIC;
            stop_state  : out STD_LOGIC;
            reset_state : out STD_LOGIC
        );
    end component;

    signal clk         : STD_LOGIC := '0';
    signal reset       : STD_LOGIC := '0';
    signal heart_rate  : STD_LOGIC := '0';
    signal duration    : STD_LOGIC_VECTOR(15 downto 0);
    signal memory      : STD_LOGIC_VECTOR(15 downto 0);
    signal highest_time: STD_LOGIC_VECTOR(15 downto 0);
    signal latest_time : STD_LOGIC_VECTOR(15 downto 0);
    signal avg_time    : STD_LOGIC_VECTOR(15 downto 0);
    signal active_state: STD_LOGIC;
    signal stop_state  : STD_LOGIC;
    signal reset_state : STD_LOGIC;

    constant CLK_PERIOD : time := 10 ns;

begin
    uut: HeatFit_Timer
        Port map (
            clk         => clk,
            reset       => reset,
            heart_rate  => heart_rate,
            duration    => duration,
            memory      => memory,
            highest_time=> highest_time,
            latest_time => latest_time,
            avg_time    => avg_time,
            active_state=> active_state,
            stop_state  => stop_state,
            reset_state => reset_state
        );

    -- Clock generation
    clk_process : process
    begin
        while True loop
            clk <= '0';
            wait for CLK_PERIOD / 2;
            clk <= '1';
            wait for CLK_PERIOD / 2;
        end loop;
    end process;

    -- Test stimulus
    stimulus_process : process
    begin
        -- Initialize
        reset <= '0';
        heart_rate <= '0';
        wait for 20 ns;

        -- First Session: Simulate heart_rate = '1' for 50 ns
        heart_rate <= '1';
        wait for 50 ns;

        -- Assert reset to save session and reset timer
        reset <= '1';
        wait for 20 ns;
        reset <= '0';

        -- Check average time after first session (should match first session's duration)
        wait for 10 ns;

        -- Second Session: Simulate heart_rate = '1' for 100 ns
        heart_rate <= '1';
        wait for 100 ns;

        -- Assert reset to save session and reset timer
        reset <= '1';
        wait for 20 ns;
        reset <= '0';

        -- Check average time after second session
        wait for 10 ns;

        -- Third Session: Simulate heart_rate = '1' for 75 ns
        heart_rate <= '1';
        wait for 75 ns;

        -- Assert reset to save session and reset timer
        reset <= '1';
        wait for 20 ns;
        reset <= '0';

        -- Check average time after third session
        wait for 10 ns;

        -- Fourth Session: Simulate heart_rate = '1' for 25 ns
        heart_rate <= '1';
        wait for 25 ns;

        -- Assert reset to save session and reset timer
        reset <= '1';
        wait for 20 ns;
        reset <= '0';

        -- End simulation
        wait;
    end process;
end Behavioral;
